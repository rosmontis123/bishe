# -*- coding: utf-8 -*-
from functools import partial

# Form implementation generated from reading ui file '.\setBdf.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QLabel


class Ui_SetBdf(object):
    def setupUi(self,  Setting, ckMontage, dgroup, dgroup_filter):
        Setting.setObjectName("Setting")
        Setting.resize(1380, 766)

        self.dgroup=dgroup
        self.dgroup_filter = dgroup_filter
        self.ckMontage = ckMontage

        iFont = QFont("", 11)
        self.dgroupKeys=list(self.dgroup.keys())
        glen=len(self.dgroupKeys)
        self.lb_g=[]
        self.ck_g=[]

        self.label_2 = QtWidgets.QLabel(Setting)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 54, 12))
        self.label_2.setObjectName("label_2")
        self.radioButtonMontage_1 = QtWidgets.QRadioButton(Setting)
        self.radioButtonMontage_1.setGeometry(QtCore.QRect(130, 20, 89, 16))

        self.radioButtonMontage_1.setObjectName("radioButton")

        self.radioButtonMontage_2 = QtWidgets.QRadioButton(Setting)
        self.radioButtonMontage_2.setGeometry(QtCore.QRect(290, 20, 89, 16))
        self.radioButtonMontage_2.setObjectName("radioButton_2")

        self.pb_ok = QtWidgets.QPushButton(Setting)
        self.pb_ok.setGeometry(QtCore.QRect(800, 20, 61, 23))
        self.pb_ok.setObjectName("pb_ok")
        self.pb_cancel = QtWidgets.QPushButton(Setting)
        self.pb_cancel.setGeometry(QtCore.QRect(900, 20, 61, 23))
        self.pb_cancel.setObjectName("pb_cancel")

        y=0
        index=0
        for i in range(glen):
            self.lb_g.append(QtWidgets.QPushButton(Setting))
            self.lb_g[i].setGeometry(QtCore.QRect(10, 60+y, 58, 20))
            self.lb_g[i].setObjectName(f"{self.dgroupKeys[i]}")
            self.lb_g[i].clicked.connect(partial(self.groupSel, self.dgroupKeys[i]))
            self.lb_g[i].setStyleSheet('height : 20px;width:60px;color:blue;text-align: left;')

            self.lb_g[i].setCursor(Qt.PointingHandCursor)
            chs=self.dgroup.get(self.dgroupKeys[i])

            for j in range(len(chs)):
                if j!=0 and j%10==0:
                    y+=20
                self.ck_g.append(QtWidgets.QCheckBox(Setting))
                self.ck_g[index].setGeometry(QtCore.QRect(70+(j%10)*130, 60+y, 128, 16))
                self.ck_g[index].setObjectName(f"{chs[j]}")
                self.ck_g[index].setFont(iFont)
                index+=1
            y += 20

        #
        # self.ck_2 = QtWidgets.QCheckBox(Setting)
        # self.ck_2.setGeometry(QtCore.QRect(220, 90, 71, 16))
        # self.ck_2.setObjectName("ck_2")
        # self.ck_3 = QtWidgets.QCheckBox(Setting)
        # self.ck_3.setGeometry(QtCore.QRect(400, 90, 71, 16))
        # self.ck_3.setObjectName("ck_3")
        # self.ck_4 = QtWidgets.QCheckBox(Setting)
        # self.ck_4.setGeometry(QtCore.QRect(570, 90, 71, 16))
        # self.ck_4.setObjectName("ck_4")

        self.radioButtonMontage_2.clicked.connect(partial(self.initChannels,1))
        self.radioButtonMontage_1.clicked.connect(partial(self.initChannels,0))
        self.lb_gSt=[]
        for i in range(len(self.lb_g)):
            self.lb_gSt.append(False)

        self.retranslateUi(Setting)
        QtCore.QMetaObject.connectSlotsByName(Setting)


    def retranslateUi(self, Setting):
        _translate = QtCore.QCoreApplication.translate
        Setting.setWindowTitle(_translate("Setting", "Setting"))

        self.initChannels(self.ckMontage)

        self.label_2.setText(_translate("Setting", "参考方案："))
        self.radioButtonMontage_1.setText(_translate("Setting", "默认"))
        self.radioButtonMontage_2.setText(_translate("Setting", "双极"))
        self.pb_ok.setText(_translate("Setting", "确定"))
        self.pb_cancel.setText(_translate("Setting", "取消"))
    def initChannels(self,montage_id):
        glen = len(self.dgroupKeys)
        index = 0
        if montage_id==0:
            self.radioButtonMontage_1.setChecked(True)
            self.radioButtonMontage_2.setChecked(False)
            for i in range(glen):
                self.lb_g[i].setText(f"{self.dgroupKeys[i]}")
                chs = self.dgroup.get(self.dgroupKeys[i])
                for j in range(len(chs)):
                    self.ck_g[index].setText(f"{chs[j]}")
                    if chs[j] in self.dgroup_filter:
                        self.ck_g[index].setChecked(True)
                    else:
                        self.ck_g[index].setChecked(False)
                    index += 1
                self.ck_g[index-1].show()
                #self.ck_g[index-1].setChecked(True)
        else:
            self.radioButtonMontage_2.setChecked(True)
            self.radioButtonMontage_1.setChecked(False)
            for i in range(glen):
                self.lb_g[i].setText(f"{self.dgroupKeys[i]}")
                chs = self.dgroup.get(self.dgroupKeys[i])
                for j in range(len(chs)-1):
                    ch=f"{chs[j]}'-'{chs[j+1]}"
                    self.ck_g[index].setText(ch)
                    if ch in self.dgroup_filter:
                        self.ck_g[index].setChecked(True)
                    else:
                        self.ck_g[index].setChecked(False)
                    index += 1
                self.ck_g[index].hide()
                self.ck_g[index].setChecked(False)
                index += 1

    def groupSel(self, gname):
        glen = len(self.dgroupKeys)
        index = 0
        if self.radioButtonMontage_1.isChecked():
            for i in range(glen):
                chs = self.dgroup.get(self.dgroupKeys[i])
                if gname==self.dgroupKeys[i]:
                    st=self.lb_gSt[i]
                    if st:
                        st=False
                    else:
                        st = True
                    self.lb_gSt[i]=st
                    for j in range(len(chs)):
                       self.ck_g[index].setChecked(st)
                       index += 1
                    break;
                else:
                    index += len(chs)

        else:
            for i in range(glen):
                chs = self.dgroup.get(self.dgroupKeys[i])
                if gname == self.dgroupKeys[i]:
                    st = self.lb_gSt[i]
                    if st:
                        st = False
                    else:
                        st = True
                    self.lb_gSt[i] = st
                    for j in range(len(chs)-1):
                        self.ck_g[index].setChecked(st)
                        index += 1
                    break;
                else:
                    index += len(chs)
